<?php
/**
 * User: cy
 * Date: 2018/7/18
 * Time: 17:43
 */

namespace app\models;


use yii\base\Behavior;
use yii\base\Model;

class FileValidate extends Model
{
    public $name;
    public $type;
    public $size;
    public $create_time;
    public $update_time;

    private $filter_type;
    private $max_size;
    private $min_size;
    private $max_create_time;
    private $min_create_time;
    private $max_update_time;
    private $min_update_time;
    private $filter_name;


    public function rules()
    {
        $rules = [
            [['name', 'type', 'size', 'create_time', 'update_time'], 'required', 'message' => "文件信息不能为空."],
            [['size', 'create_time', 'update_time'], 'integer', 'message' => "必须为整数."],
            ['type', 'in', 'range' => $this->filter_type]
        ];
        if ($this->max_size)
            $rules[] = ['size', 'compare', 'compareValue' => $this->max_size, 'operator' => '<='];
        if ($this->min_size)
            $rules[] = ['size', 'compare', 'compareValue' => $this->min_size, 'operator' => '>='];
        if ($this->max_create_time)
            $rules[] = ['create_time', 'compare', 'compareValue' => $this->max_create_time, 'operator' => '<='];
        if ($this->min_create_time)
            $rules[] = ['create_time', 'compare', 'compareValue' => $this->min_create_time, 'operator' => '>='];
        if ($this->max_update_time)
            $rules[] = ['update_time', 'compare', 'compareValue' => $this->max_update_time, 'operator' => '<='];
        if ($this->min_update_time)
            $rules[] = ['update_time', 'compare', 'compareValue' => $this->min_update_time, 'operator' => '>='];
        return $rules;
    }

    public function validate($attributeNames = null, $clearErrors = true)
    {
        if (!empty($this->filter_name) && is_array($this->filter_name)) {
            foreach ($this->filter_name as $key => $val) {
                if (strpos($this->name, $val) !== false) {
                    return false;
                }
            }
        }
        return parent::validate($attributeNames, $clearErrors); // TODO: Change the autogenerated stub
    }


    /**
     * @return mixed
     */
    public function getFilterType()
    {
        return $this->filter_type;
    }

    /**
     * @param mixed $filter_type
     */
    public function setFilterType($filter_type)
    {
        $this->filter_type = $filter_type;
    }

    /**
     * @return mixed
     */
    public function getMinSize()
    {
        return $this->min_size;
    }

    /**
     * @param mixed $min_size
     */
    public function setMinSize($min_size)
    {
        $this->min_size = $min_size;
    }

    /**
     * @return mixed
     */
    public function getMaxCreateTime()
    {
        return $this->max_create_time;
    }

    /**
     * @param mixed $max_create_time
     */
    public function setMaxCreateTime($max_create_time)
    {
        $this->max_create_time = $max_create_time;
    }

    /**
     * @return mixed
     */
    public function getMinCreateTime()
    {
        return $this->min_create_time;
    }

    /**
     * @param mixed $min_create_time
     */
    public function setMinCreateTime($min_create_time)
    {
        $this->min_create_time = $min_create_time;
    }

    /**
     * @return mixed
     */
    public function getMaxUpdateTime()
    {
        return $this->max_update_time;
    }

    /**
     * @param mixed $max_update_time
     */
    public function setMaxUpdateTime($max_update_time)
    {
        $this->max_update_time = $max_update_time;
    }

    /**
     * @return mixed
     */
    public function getMinUpdateTime()
    {
        return $this->min_update_time;
    }

    /**
     * @param mixed $min_update_time
     */
    public function setMinUpdateTime($min_update_time)
    {
        $this->min_update_time = $min_update_time;
    }

    /**
     * @return mixed
     */
    public function getFilterName()
    {
        return $this->filter_name;
    }

    /**
     * @param mixed $filter_name
     */
    public function setFilterName($filter_name)
    {
        $this->filter_name = $filter_name;
    }

    /**
     * @return mixed
     */
    public function getMaxSize()
    {
        return $this->max_size;
    }

    /**
     * @param mixed $max_size
     */
    public function setMaxSize($max_size)
    {
        $this->max_size = $max_size;
    }


}